#!/usr/bin/env ruby
# frozen_string_literal: true

require "intesisbox"
require "homie-mqtt"

class MQTTBridge
  def initialize(mqtt_uri, devices: [], root_topic: nil, bind_addr: "0.0.0.0")
    @base_topic = "homie/intesisbox"
    @bind_addr = bind_addr

    bridge, discovery_property = nil
    @device = MQTT::Homie::Device.new("intesisbox", "IntesisBox", root_topic: root_topic,
                                                                  mqtt: mqtt_uri) do |topic, value|
      if topic == discovery_property.topic
        @device.mqtt.unsubscribe(topic)
        discovery_property.set(value) unless @got_discovery
        @got_discovery = true
      end
    end

    @explicit_devices = devices
    @wmps = {}
    @discovery = 30

    bridge = nil
    @device.node("bridge", "Bridge", "Bridge") do |node|
      (bridge = node).property("discovery",
                               "Auto-Discovery Interval",
                               :integer,
                               @discovery,
                               format: 0..86_400,
                               unit: "s") do |value, prop|
        old_value = @discovery
        prop.value = (@discovery = value)
        if value < old_value || old_value.zero?
          @discovery_thread.kill
          start_discovery_thread
        end
      end
    end
    discovery_property = bridge["discovery"]
    @device.publish
    # use MQTT itself as our state store
    @device.mqtt.subscribe(discovery_property.topic)

    setup_discovery
    start_discovery_thread

    @device.join
  end

  def start_discovery_thread
    @discovery_thread = Thread.new do
      connect_explicit_devices
      @discovery_object.discover
      loop do
        break if @discovery.zero?

        sleep(@discovery)
        connect_explicit_devices
        @discovery_object.discover
      end
    end
  end

  def connect_explicit_devices
    @explicit_devices.each do |addr|
      next if @wmps.any? do |_, wmp|
        wmp.ip == addr
      end

      add_wmp(addr)
    end
  end

  def setup_discovery
    @discovery_object = IntesisBox::Discovery.new(bind_addr: @bind_addr) do |details|
      # force a reconnect to WMPs that have moved
      mac = MQTT::Homie.escape_id(details[:mac])
      known_wmp = @wmps[mac]
      @wmps.delete(mac) if known_wmp && known_wmp.ip != details[:ip]

      next true if @wmps.key?(mac)

      add_wmp(details[:ip])
      true
    end
  end

  def add_wmp(addr)
    wmp = IntesisBox::Client.new(addr)

    loop do
      break if wmp.mac

      unless wmp.poll(1)
        IntesisBox.logger.warn "unable to talk to #{wmp.ip}"
        break
      end
    end
    return unless wmp.mac

    IntesisBox.logger.info "Found new WMP #{wmp.mac} (#{wmp.devicename})"
    @wmps[MQTT::Homie.escape_id(wmp.mac)] = wmp
    node = publish_wmp(wmp)

    Thread.new do
      loop do
        next wmp.ping unless wmp.poll

        node.name = wmp.devicename
        node["ip"].value = wmp.ip
        node["onoff"].value = wmp.onoff
        node["mode"].value = wmp.mode if wmp.limits[:mode]&.length.to_i.positive?
        node["fansp"].value = wmp.fansp if wmp.limits[:fansp]&.length.to_i.positive?
        node["vaneud"].value = wmp.vaneud if wmp.limits[:vaneud]&.length.to_i.positive?
        node["vanelr"].value = wmp.vanelr if wmp.limits[:vanelr]&.length.to_i.positive?
        node["setptemp"].value = wmp.setptemp if wmp.setptemp
        node["ambtemp"].value = wmp.ambtemp if wmp.ambtemp
        node["errstatus"].value = wmp.errstatus
        node["errcode"].value = wmp.errcode
        node["devicename"].value = wmp.devicename
      end
    rescue => e
      IntesisBox.logger.warn "Lost connection to #{wmp.mac} (#{wmp.devicename}): #{e}"
      remove_wmp(wmp)
    end
  end

  def publish_wmp(wmp)
    generic_property = lambda do |value, prop|
      wmp = @wmps[prop.node.id]
      wmp.send("#{prop.id}=", value)
    end

    @device.node(MQTT::Homie.escape_id(wmp.mac), wmp.devicename, wmp.model) do |node|
      node.property("devicename", "Device Name", :string, wmp.devicename, &generic_property)
      node.property("ip", "IP Address", :string, wmp.ip)
      node.property("onoff", "AC unit On or Off", :boolean, wmp.onoff, &generic_property)

      if wmp.limits[:mode]&.length.to_i.positive?
        node.property("mode", "Mode (heat, cool, fan, dry or auto)", :enum, wmp.mode, format: wmp.limits[:mode],
                      &generic_property)
      end

      if wmp.limits[:fansp]&.length.to_i.positive?
        node.property("fansp", "Fan speed", :enum, wmp.fansp, format: wmp.limits[:fansp], &generic_property)
      end

      if wmp.limits[:vaneud]&.length.to_i.positive?
        node.property("vaneud", "Up/Down vane position", :enum, wmp.vaneud, format: wmp.limits[:vaneud],
                      &generic_property)
      end

      if wmp.limits[:vanelr]&.length.to_i.positive?
        node.property("vanelr", "Left/Right vane position", :enum, wmp.vanelr, format: wmp.limits[:vanelr],
                      &generic_property)
      end

      node.property("setptemp", "Set point temperature", :float, wmp.setptemp,
                    unit: "°C", format: Range.new(*wmp.limits[:setptemp]), &generic_property)
      node.property("ambtemp", "Ambient temperature", :float, unit: "°C")
      node.property("errstatus", "Shows if any error occurs", :string, wmp.errstatus)
      node.property("errcode", "Error code", :integer, wmp.errcode)
    end
  end

  def remove_wmp(wmp)
    mac = MQTT::Homie.escape_id(wmp.mac)
    @wmps.delete(mac)
    @device.remove_node(mac)
  end
end

require "optparse"

devices = nil
bind = nil

options = OptionParser.new do |opts|
  opts.banner = "Usage: intesisbox_mqtt_bridge MQTT_URI [options]"

  opts.on("-b", "--bind ADDRESS", "Address to bind to") do |v|
    bind = v
  end
  opts.on("-d", "--device x,y,z", Array, "List of devices to explicitly connect to") do |list|
    devices = list
  end
  opts.on("-h", "--help", "Prints this help") do
    warn opts
    exit
  end
end

options.parse!

unless ARGV.length == 1
  warn options
  exit 1
end

Thread.abort_on_exception
IntesisBox.logger = Logger.new($stdout)

mqtt_uri = ARGV[0]
MQTTBridge.new(mqtt_uri, devices: devices, bind_addr: bind || "0.0.0.0")
